<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter xml:id="intro" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Introduction</title>
    
    <section>
        <title>Overview</title>
        
        <para>
            Gnip4j is an Open Source (ASFL 2.0) library to access and process Activities (tweets)
from the <ulink url="http://docs.gnip.com/w/page/23724581/Gnip-Full-Documentation">Gnip API</ulink>. 
        </para>
        <warning><para>
            Because library is in an early stage, it does not support all the API operations.
        </para></warning>
    </section>
    <section>
        <title>Available Artifacts</title>
        <para>The library provides the following artifacts:
            <itemizedlist>
                <listitem><para><literal>gnip4-core</literal>: Self-Contained implementation of the API.</para></listitem>
                <listitem><para><literal>gnip4-http</literal>: Provides an implementation that uses 
                <ulink url="http://hc.apache.org/httpcomponents-client-ga/">Apache HttpClient</ulink>
                instead of standard <ulink url="http://download.oracle.com/javase/6/docs/api/java/net/URLConnection.html">JDK UrlConnection</ulink> to connect to the Gnip host.</para></listitem>
            </itemizedlist>
        </para>
        
        <section>
            <title>Maven Support</title>
            <para>
                Following the best practices of <ulink url="http://maven.apache.org/">Maven</ulink>, 
                it is recommended to declare all the available artifacts in the  <ulink url="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">dependencyManagement</ulink>:
            </para>
                                <programlisting language="XML"><![CDATA[<dependencyManagment>
   <dependency>
      <groupId>com.zaubersoftware.gnip4j</groupId>
      <artifactId>gnip4j-core</artifactId>
      <version>${gnip4j.version}</version>
   </dependency>
   <dependency>
      <groupId>com.zaubersoftware.gnip4j</groupId>
      <artifactId>gnip4j-http</artifactId>
      <version>${gnip4j.version}</version>
   </dependency>
</dependencyManagment>
...
<properties>
    <gnip4j.version>0.0</gnip4j.version>
</properties>]]></programlisting><para>
            
            And then in the <literal><![CDATA[<dependencies>]]></literal> section
            of the module that need to use gnip4j add the core dependency:
        </para>
            <programlisting><![CDATA[<dependency>
    <groupId>com.zaubersoftware.gnip4j</groupId>
    <artifactId>gnip4j-core</artifactId>
</dependency>]]></programlisting>

            If want to use the <literal>gnip-http</literal> artifact then you need to also add:
            <programlisting language="XML"><![CDATA[<dependency>
    <groupId>com.zaubersoftware.gnip4j</groupId>
    <artifactId>gnip4j-http</artifactId>
</dependency>]]></programlisting>
        </section>
    </section>
    <section>        
        <title>Library dependencies</title>
        <para>We had tried to keep dependencies to the bare minimum: No Apache's commons-lang, 
        no Google's guava, no Spring in the <literal>gnip4j-core</literal> artifact. 
        The only mandatory dependencies are the <ulink url="http://jackson.codehaus.org">Jackson's JSON parser</ulink>.
        </para>
        <para>
         The other modules, may have broader dependencies (for example <literal>gnip4j-http</literal> has <literal>commons-client</literal>).
        </para>
        <section>
            <title>Service Provider Interfaces</title>
            <para>
                The library looks up at run-time if there are some classes available so it can provide
                an advanced feature. This is implemented as <ulink url="http://en.wikipedia.org/wiki/Service_provider_interface">SPIs</ulink>.
            </para>
            <section>
                <title>Logging</title>
                <para>
                    Gnip4j use extensively logging to help developers trace all the actions. When the 
                    library is first used it searches for <ulink url="http://www.slf4j.org/">SLF4j</ulink>.
                    If it is present (gnip4j searches for the class <literal>org.slf4j.Logger</literal>)
                    then slf4j will be used. If it isn't present then logging is not used at all. 
                </para>
                <para>For more information, take a look at the code at the package: <literal>com.zaubersoftware.gnip4j.api.support.logging</literal>.</para>
                <section>
                    <title>Example: configuring gnip4p &amp; slf4j  &amp;  Log4j </title>
                    <programlisting language="XML"><![CDATA[<!-- BEGIN: Logging -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-log4j12</artifactId>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <scope>runtime</scope>
</dependency>
<!-- END: Logging -->]]></programlisting><para>And you can write a <literal>log4j.properties</literal> to 
trace all gnip4j logging:</para>
<programlisting><![CDATA[
log4j.rootLogger=ERROR, stdout

log4j.logger.com.zaubersoftware.gnip4j=trace

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# Print the date in ISO 8601 format
log4j.appender.stdout.layout.ConversionPattern=%d{mm\:ss,SSS} [%t] %-5p %c{1} - %m%n
]]></programlisting>
                </section>
            </section>
            <section>
                <title>Base64</title>
                <para>
                    When using the <literal>JRERemoteResourceProvider</literal> implementation
                    (that's the one that uses <ulink url="http://download.oracle.com/javase/6/docs/api/java/net/URLConnection.html">JDK UrlConnection</ulink> to connect to the Gnip host)
                    user and password authentication information need to be sent coded in base64.
                </para>
                <para>
                    For now the default SPI implementation uses <literal>sun.misc.BASE64Encoder</literal>,
                    but as this won't be available in all JRE implementations (for example: Android),
                    there is room for others SPI implementations. Package:
                    <literal>com.zaubersoftware.gnip4j.api.support.base64</literal>.
                </para>
                <note>
                    <para>
                        This is not required if using <literal>gnip4-http</literal> implementation
                        (class <literal>HttpClientRemoteResourceProvider</literal>).
                    </para>
                </note>
            </section>
            <section>
                <title>JMX</title>
                <para>
                    Gnip4j exports some stats using JMX. As not all JRE supports JMX; this is
                    feature is provided as SPI. If JMX is not available, then gnip4j won't export
                    any information.  
                </para>
            </section>
        </section>
    </section>
        
                    
</chapter>
